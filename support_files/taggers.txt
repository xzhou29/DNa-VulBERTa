( na
translation_unit $TranU
function_definition na
type $T
: na
primitive_type $PriT
) na
declarator $Decr
function_declarator $FuncDec
identifier $Iden
parameters $Pars
parameter_list na
body $B
compound_statement $ComS
declaration $Decn
pointer_declarator $PointDec
expression_statement $ExpStm
assignment_expression $AssinExp
left $L
right $R
null na
cast_expression $CastExp
type_descriptor $TDes
abstract_pointer_declarator $AbsPointDec
value $V
call_expression $CalExp
function $Func
arguments $Args
argument_list $ArgLst
number_literal $NumL
pointer_expression $PointExp
argument $Arg
parameter_declaration $ParamDecn
init_declarator $InitDecr
parenthesized_expression $ParenExp
array_declarator $ArrDec
size $size
initializer_list $IniLst
for_statement $ForStm
initializer $Initializer
condition $C
binary_expression $BinExp
update $U
unary_expression $UnaryExp
MISSING $MISSING
subscript_expression $SubExp
index $Index
storage_class_specifier $StoClassSpec
sizeof_expression $SizeOfExp
type_identifier $TIden
ERROR $ERROR
char_literal $CharLit
escape_sequence $ESCSeq
type_qualifier $TQua
if_statement $IfStm
consequence $Conseq
comma_expression $CommaExp
string_literal $StrLit
while_statement $WhileStm
return_statement na
field_expression $FExp
field $F
field_identifier $FIden
struct_specifier $StructSpec
name $N
switch_statement $SStm
labeled_statement $LStm
label $L
statement_identifier $StmIden
sized_type_specifier $SizedTSpec
"]" na
UNEXPECTED $U
' na
conditional_expression $CondExp
alternative $Alt
enum_specifier $EnumSpec
parenthesized_declarator $ParenDec
field_declaration_list $FDecLst
field_declaration $FDec
"'" na
";" na
abstract_function_declarator $AbsFuncDec
concatenated_string $ConcateStr
union_specifier $USpec
'@' na
" na
macro_type_specifier $MacroTSpec
compound_literal_expression $ComLitExp
preproc_def $PreDef
preproc_arg $PreArg
"}" na
break_statement na
true na
false na
'n' na
abstract_array_declarator $AbsArrDec
''' na
preproc_call $PreCal
directive $Direc
preproc_directive $PreDirec